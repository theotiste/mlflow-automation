import mlflow
import psycopg2
import mlflow.sklearn
from mlflow.tracking import MlflowClient

# üîπ D√©finir PostgreSQL comme backend MLflow
mlflow.set_tracking_uri("postgresql+psycopg2://postgres:mlflowpass@localhost:5432/mlflow_db")

# üîπ D√©finir le nom du mod√®le dans MLflow Registry
MODEL_NAME = "theo_model"

# üîπ Initialiser le client MLflow
client = MlflowClient()

# üîπ R√©cup√©rer le dernier run de l'exp√©rience 'recherche-model' ou 'optimisation-model'
experiment_name = "recherche-model"  # Modifier selon le mod√®le √† enregistrer
experiment = client.get_experiment_by_name(experiment_name)

if experiment:
    experiment_id = experiment.experiment_id
    runs = client.search_runs(experiment_id, order_by=["metrics.accuracy DESC"], max_results=1)

    if runs:
        best_run = runs[0]  # S√©lectionner le meilleur run
        run_id = best_run.info.run_id

        print(f" Enregistrement du mod√®le depuis le run {run_id}")

        # üîπ Enregistrer le mod√®le dans MLflow Model Registry
        model_uri = f"runs:/{run_id}/model"
        model_version = mlflow.register_model(model_uri, MODEL_NAME)

        print(f"Mod√®le {MODEL_NAME} enregistr√© avec succ√®s, version : {model_version.version}")

        # üîπ Passer automatiquement √† "Production"
        client.transition_model_version_stage(name=MODEL_NAME, version=model_version.version, stage="Production")

        print(f"Mod√®le {MODEL_NAME} (v{model_version.version}) est maintenant en Production !")
    else:
        print(" Aucun run trouv√© dans l'exp√©rience. V√©rifie que l'entra√Ænement a bien √©t√© ex√©cut√©.")
else:
    print(" L'exp√©rience sp√©cifi√©e n'existe pas dans MLflow.")

